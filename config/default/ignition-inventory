variant: fcos
version: 1.3.0
ignition:
  version: 3.2.0
storage:
  files:
  - overwrite: true
    path: "/etc/containerd/config.toml"
    contents:
      source: data:;base64,dmVyc2lvbiA9IDIKcm9vdCA9ICIvcnVuL2NvbnRhaW5lcmQvcm9vdCIKc3RhdGUgPSAiL3J1bi9jb250YWluZXJkL3N0YXRlIgo=
    mode: 420
  - overwrite: true
    path: "/opt/inventory.sh"
    contents:
      inline: |+
        #!/usr/bin/env bash

        ROOT=/host-root
        ROOT_VOL="--mount type=bind,src=/,dst=${ROOT},options=rbind:ro"
        CONFIG=/tmp/kube/config
        GATEWAY="http://192.168.10.3:30760"

        if [ -z ${IMG+x} ]; then
            IMG="ghcr.io/onmetal/inventory:latest"
        fi

        if [ -z ${NAMESPACE+x} ]; then
            NAMESPACE="default"
        fi

        function main() {
            echo "Inventorize and test started"
            clean_before_start;
            pull_image;
            inventorization;
            benchmarks;
        }

        function clean_before_start() {
            echo "Cleaning up old containers if they are exists"
            ctr c rm inventorization
            ctr c rm benchmarks
        }

        function pull_image() {
            echo "Pulling image: ${IMG}"
            ctr image pull ${IMG}
        }

        function inventorization() {
            echo "Inventarization process started"
            CONTAINER_KUBECONFIG="--mount type=bind,src=${HOST_CONFIG},dst=${CONFIG},options=rbind:ro"
            NAME="inventorization"
            ctr run -d --privileged --rm --net-host ${ROOT_VOL} ${CONTAINER_KUBECONFIG} ${IMG} ${NAME} /app/inventory -r ${ROOT} -k ${CONFIG} -g ${GATEWAY} -n ${NAMESPACE} ${USER_VERBOSE}
        }

        function benchmarks() {
            echo "Wait for inventory creation"
            sleep 10
            echo "Benchmark process started"
            NAME="benchmarks"
            ctr run --env ROOT=${ROOT} -d --privileged --rm --net-host ${ROOT_VOL} ${IMG} ${NAME} /app/benchmark-scheduler run -g ${GATEWAY} -n ${NAMESPACE}
        }

        function print_help() {
            echo "Script used to run docker container with inventory tool."
            echo "Container runs once and will be deleted after completion."
            echo "There are two use cases - when k8s config file contains "
            echo "paths to the certificates and keys and when it contains "
            echo "certificates and keys data."
            echo ""
            echo "Usage: ./inventory.sh [options]"
            echo ""
            echo "  -h|--help to print this message"
            echo ""
            echo "When k8s config file contains paths to certificates and "
            echo "keys, mandatory options are:"
            echo ""
            echo "  -k|--kubeconfig   string  absolute path to the k8s config file "
            echo "                      stored on the host"
            echo ""
            echo "Optional parameter is:"
            echo "  -i|--image  string  repository/image:tag if not set, will"
            echo "                      use default repository: 'ghcr.io/onmetal/inventory'"
            echo ""
            echo "  -v|--verbose        enables verbose output"
            echo "                      may be used to troubleshoot the process if data is not collected for some reason"
            echo ""
            echo "  -n|--namespace  string  resource will be pushed to selected namespace"
            echo "                          default value: 'default'"
            echo ""
            exit 0
        }

        POSITIONAL=()
        while [[ $# -gt 0 ]]; do
            key="$1"

            case $key in
                -v|--verbose)
                    USER_VERBOSE="-v"
                    shift
                    ;;
                -k|--kubeconfig)
                    HOST_CONFIG="$2"
                    shift
                    ;;
                -i|--image)
                    IMG="$2"
                    shift
                    ;;
                -n|--namespace)
                    NAMESPACE="$2"
                    shift
                    ;;
                -r|--run)
                    main
                    shift
                    ;;
                -h|--help)
                    print_help
                    shift
                    ;;
                *)
                    POSITIONAL+=("$1")
                    shift
                    ;;
            esac
        done

        set -- "${POSITIONAL[@]}"

        if [ -z ${HOST_CONFIG+x} ]; then
            echo "-k|--kubeconfig parameter is mandatory"
        fi

    mode: 493
systemd:
  units:
  - contents: |
      [Unit]
      Before=install.service bird.service
      After=network-online.target containerd.service
      Wants=network-online.target containerd.service

      [Service]
      Type=oneshot
      ExecStart=/opt/inventory.sh -n oob -i ghcr.io/onmetal/inventory:latest -r
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
    enabled: true
    name: inventory.service

